REM ***********************************************************************************************
REM SCRIPT 용도   : 은행 계좌 간의 거래 내역 정산
REM 작성자         : 서유경
REM 작성일         : 2022-07-08, Version 1
REM 수정일
REM
REM 주의사항       : 
REM
REM 수정사항 FORMAT     YYYY-MM-DD  수정자 수정내용
REM 수정사항
REM ***********************************************************************************************

DROP PROCEDURE PR_MY_TRANSACTION;
CREATE OR REPLACE PROCEDURE PR_MY_TRANSACTION(
    V_ACTIVE_ACCT_NO        TRANSACTION_DETAIL.ACTIVE_ACCT_NO%TYPE,
    V_TYPE                  TRANSACTION_DETAIL.TYPE%TYPE,
    V_NAME                  TRANSACTION_DETAIL.NAME%TYPE,
    V_DEAL_NAME             TRANSACTION_DETAIL.NAME%TYPE,
    V_AMOUNT                TRANSACTION_DETAIL.AMOUNT%TYPE,
    V_DEAL_BANKCODE         TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_DEAL_ACCT_NO          TRANSACTION_DETAIL.DEAL_ACCT_NO%TYPE
)
AS
    V_BALANCE   TRANSACTION_DETAIL.AMOUNT%TYPE;
BEGIN
    -- 계좌 금액 UPDATE
    UPDATE ACCOUNT SET AMOUNT = AMOUNT + V_AMOUNT WHERE ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    
    -- 거래내역 INSERT
    SELECT F.AMOUNT INTO V_BALANCE FROM ACCOUNT F WHERE F.ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    INSERT INTO TRANSACTION_DETAIL(TRANSACTION_SEQ, ACTIVE_ACCT_NO, TYPE, NAME, DEAL_NAME, AMOUNT, BALANCE, DEAL_BANKCODE, DEAL_ACCT_NO)
    VALUES(SEQ_TRANSACTION_DETAIL.NEXTVAL, V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_DEAL_NAME, V_AMOUNT, V_BALANCE, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);
    
END;
/


DROP PROCEDURE PR_HJ_TRANSACTION;
CREATE OR REPLACE PROCEDURE PR_HJ_TRANSACTION(
    V_ACTIVE_ACCT_NO        TRANSACTION_DETAIL.ACTIVE_ACCT_NO%TYPE,
    V_TYPE                  TRANSACTION_DETAIL.TYPE%TYPE,
    V_NAME                  TRANSACTION_DETAIL.NAME%TYPE,
    V_DEAL_NAME             TRANSACTION_DETAIL.NAME%TYPE,
    V_AMOUNT                TRANSACTION_DETAIL.AMOUNT%TYPE,
    V_DEAL_BANKCODE         TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_DEAL_ACCT_NO          TRANSACTION_DETAIL.DEAL_ACCT_NO%TYPE
)
AS
    V_BALANCE   TRANSACTION_DETAIL.AMOUNT%TYPE;
    V_MEMBER_NAME      O_MEMBER.NAME@ORCL_TO_HJORCL_LINK%TYPE;
    V_DEAL_MEMBER_NAME      MEMBER.NAME%TYPE;
BEGIN
    -- 계좌 금액 UPDATE
    -- @ORCL_TO_HJORCL_LINK
    UPDATE O_ACCOUNT@ORCL_TO_HJORCL_LINK SET BALANCE = BALANCE + V_AMOUNT WHERE ACCOUNT_NUMBER = V_ACTIVE_ACCT_NO;
    SELECT NAME INTO V_MEMBER_NAME FROM O_MEMBER@ORCL_TO_HJORCL_LINK 
    WHERE ID = (SELECT F.ID FROM O_ACCOUNT@ORCL_TO_HJORCL_LINK F WHERE F.ACCOUNT_NUMBER = V_ACTIVE_ACCT_NO);
    V_DEAL_MEMBER_NAME := '서유경';
--    SELECT NAME INTO V_DEAL_MEMBER_NAME FROM MEMBER
--    WHERE ID IN (SELECT MEMBER_ID FROM ACCOUNT WHERE ACCOUNT_NO = V_DEAL_ACCT_NO 
--                UNION 
--                SELECT ID FROM K_ACCOUNT@ORCL_TO_SYORCL_LINK WHERE ACCOUNT_NO = V_DEAL_ACCT_NO
--                UNION
--                SELECT ID FROM O_ACCOUNT@ORCL_TO_HJORCL_LINK WHERE ACCOUNT_NUMBER = V_DEAL_ACCT_NO);
    
    -- 상대거래내역 INSERT
    -- @ORCL_TO_HJORCL_LINK
    SELECT F.BALANCE INTO V_BALANCE FROM O_ACCOUNT@ORCL_TO_HJORCL_LINK F WHERE F.ACCOUNT_NUMBER = V_ACTIVE_ACCT_NO;
    INSERT INTO O_TRANSACTION_HISTORY@ORCL_TO_HJORCL_LINK(HISTORY_NO, ID, ACCOUNT_NUMBER, TRANSACTION_TYPE, TRANSACTION_AMOUNT, BALANCE, TRADER)
    VALUES(SEQ_O_TRANSACTION_HISTORY_NO.NEXTVAL@ORCL_TO_HJORCL_LINK, V_MEMBER_NAME, V_ACTIVE_ACCT_NO, V_TYPE, V_AMOUNT, V_BALANCE,  V_DEAL_MEMBER_NAME);

END;
/

DROP PROCEDURE PR_SY_TRANSACTION;
CREATE OR REPLACE PROCEDURE PR_SY_TRANSACTION(
    V_ACTIVE_ACCT_NO        TRANSACTION_DETAIL.ACTIVE_ACCT_NO%TYPE,
    V_TYPE                  TRANSACTION_DETAIL.TYPE%TYPE,
    V_NAME                  TRANSACTION_DETAIL.NAME%TYPE,
    V_DEAL_NAME             TRANSACTION_DETAIL.NAME%TYPE,
    V_AMOUNT                TRANSACTION_DETAIL.AMOUNT%TYPE,
    V_DEAL_BANKCODE         TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_DEAL_ACCT_NO          TRANSACTION_DETAIL.DEAL_ACCT_NO%TYPE
)
AS
    V_BALANCE   TRANSACTION_DETAIL.AMOUNT%TYPE;
BEGIN
    -- 계좌 금액 UPDATE
    UPDATE K_ACCOUNT@ORCL_TO_SYORCL_LINK SET BALANCE = BALANCE + V_AMOUNT WHERE ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    
    -- 거래내역 INSERT
    SELECT F.BALANCE INTO V_BALANCE FROM K_ACCOUNT@ORCL_TO_SYORCL_LINK F WHERE F.ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    INSERT INTO K_TRANSACTION@ORCL_TO_SYORCL_LINK(TRANS_NO, MYACCOUNT_NO, TRANS_TYPE, TARGET_NAME, TRANS_AMOUNT, MY_BALANCE, TARGET_BANKCODE, TARGET_ACCOUNT)
    VALUES(SEQ_K_TRANSACTION.NEXTVAL@ORCL_TO_SYORCL_LINK, V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_AMOUNT, V_BALANCE, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);

END;
/

DROP PROCEDURE PR_SM_TRANSACTION;
CREATE OR REPLACE PROCEDURE PR_SM_TRANSACTION(
    V_ACTIVE_ACCT_NO        TRANSACTION_DETAIL.ACTIVE_ACCT_NO%TYPE,
    V_TYPE                  TRANSACTION_DETAIL.TYPE%TYPE,
    V_NAME                  TRANSACTION_DETAIL.NAME%TYPE,
    V_DEAL_NAME             TRANSACTION_DETAIL.NAME%TYPE,
    V_AMOUNT                TRANSACTION_DETAIL.AMOUNT%TYPE,
    V_DEAL_BANKCODE         TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_DEAL_ACCT_NO          TRANSACTION_DETAIL.DEAL_ACCT_NO%TYPE
)
AS
    V_BALANCE   TRANSACTION_DETAIL.AMOUNT%TYPE;
BEGIN
    -- 계좌 금액 UPDATE
    UPDATE SM_ACCOUNT@ORCL_TO_SMORCL_LINK SET BALANCE = BALANCE + V_AMOUNT WHERE ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    
    -- 거래내역 INSERT
    SELECT F.BALANCE INTO V_BALANCE FROM SM_ACCOUNT@ORCL_TO_SMORCL_LINK F WHERE F.ACCOUNT_NO = V_ACTIVE_ACCT_NO;
    
    IF V_TYPE = 'O' THEN
        INSERT INTO SM_HISTORY@ORCL_TO_SMORCL_LINK(HISTORY_NO, SEND_BANK_CODE, RECEIVE_BANK_CODE, SEND_ACCOUNT, RECEIVE_ACCOUNT, AMOUNT)
        VALUES(SEQ_SM_HISTORY.NEXTVAL@ORCL_TO_SMORCL_LINK, 4, V_DEAL_BANKCODE, V_ACTIVE_ACCT_NO, V_DEAL_ACCT_NO, V_AMOUNT);
    ELSE 
        INSERT INTO SM_HISTORY@ORCL_TO_SMORCL_LINK(HISTORY_NO, SEND_BANK_CODE, RECEIVE_BANK_CODE, SEND_ACCOUNT, RECEIVE_ACCOUNT, AMOUNT)
        VALUES(SEQ_SM_HISTORY.NEXTVAL@ORCL_TO_SMORCL_LINK, V_DEAL_BANKCODE, 4, V_DEAL_ACCT_NO, V_ACTIVE_ACCT_NO, V_AMOUNT);
    END IF;    

END;
/


CREATE OR REPLACE PROCEDURE PR_TRANSACTION(
    V_ACTIVE_BANKCODE       TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_ACTIVE_ACCT_NO        TRANSACTION_DETAIL.ACTIVE_ACCT_NO%TYPE,
    V_NAME                  TRANSACTION_DETAIL.NAME%TYPE,
    V_DEAL_NAME             TRANSACTION_DETAIL.NAME%TYPE,
    V_AMOUNT                TRANSACTION_DETAIL.AMOUNT%TYPE,
    V_DEAL_BANKCODE         TRANSACTION_DETAIL.DEAL_BANKCODE%TYPE,
    V_DEAL_ACCT_NO          TRANSACTION_DETAIL.DEAL_ACCT_NO%TYPE,
    V_PASSWORD              VARCHAR2
)
AS
    V_TYPE             TRANSACTION_DETAIL.TYPE%TYPE;
BEGIN
    V_TYPE := 'O';
    
    IF V_ACTIVE_BANKCODE = 2 THEN
        -- MY BANK
        PR_MY_TRANSACTION(V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_DEAL_NAME, (-1)*V_AMOUNT, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);
    ELSIF V_ACTIVE_BANKCODE = 1 THEN
        -- SY BANK
        PR_SY_TRANSACTION(V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_DEAL_NAME, (-1)*V_AMOUNT, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);
    ELSIF V_ACTIVE_BANKCODE = 3 THEN
        -- HJ BANK
        PR_HJ_TRANSACTION(V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_DEAL_NAME, (-1)*V_AMOUNT, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);
    ELSIF V_ACTIVE_BANKCODE = 4 THEN
        -- SM BANK
        PR_SM_TRANSACTION(V_ACTIVE_ACCT_NO, V_TYPE, V_NAME, V_DEAL_NAME, (-1)*V_AMOUNT, V_DEAL_BANKCODE, V_DEAL_ACCT_NO);
    END IF;
    
    V_TYPE := 'I';
    
    IF V_DEAL_BANKCODE = 2 THEN
        -- MY BANK
        PR_MY_TRANSACTION(V_DEAL_ACCT_NO, V_TYPE, V_DEAL_NAME, V_NAME, V_AMOUNT, V_ACTIVE_BANKCODE, V_ACTIVE_ACCT_NO);
    ELSIF V_DEAL_BANKCODE = 1 THEN
        -- SY BANK
        PR_SY_TRANSACTION(V_DEAL_ACCT_NO, V_TYPE, V_DEAL_NAME, V_NAME, V_AMOUNT, V_ACTIVE_BANKCODE, V_ACTIVE_ACCT_NO);
    ELSIF V_DEAL_BANKCODE = 3 THEN
        -- HJ BANK
        PR_HJ_TRANSACTION(V_DEAL_ACCT_NO, V_TYPE, V_DEAL_NAME, V_NAME, V_AMOUNT, V_ACTIVE_BANKCODE, V_ACTIVE_ACCT_NO);
    ELSIF V_DEAL_BANKCODE = 4 THEN
        -- SM BANK
        PR_SM_TRANSACTION(V_DEAL_ACCT_NO, V_TYPE, V_DEAL_NAME, V_NAME, V_AMOUNT, V_ACTIVE_BANKCODE, V_ACTIVE_ACCT_NO);
    ELSE
        RAISE_APPLICATION_ERROR(1, '은행 코드가 맞지 않습니다.');
    END IF;
    
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            WRITE_LOG('PR_TRANSACTION(은행계좌거래)', sqlerrm, '계좌번호 : '||V_ACTIVE_ACCT_NO||', 상대계좌  : '||V_DEAL_ACCT_NO||', 이체금 : '||V_AMOUNT);
            
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
            ROLLBACK;
END;
/

EXEC PR_MY_TRANSACTION(13900000000001, 'I', '서유경에게 출금', '서유경으로부터 입금', 10000, 02, 13900000000002);
EXEC PR_TRANSACTION(02, 13900000000001, '서유경에게 출금', '서유경으로부터 입금', 10000, 02, 13900000000002, 1111);

EXEC PR_HJ_TRANSACTION('0311512110797806', 'O', '서유경에게 출금', '서유경으로부터 입금', 10000, 02, 13900000000002);
EXEC PR_TRANSACTION(03, '0311512110797806', 'SEO에게 출금', 'HJ로부터 입금', 10000, 02, 13900000000001, 1111);
EXEC PR_TRANSACTION(02, 13900000000001, 'HJ에게 출금', 'SEO로부터 입금', 10000, 03, '0311512110797806', 1111);


EXEC PR_TRANSACTION(02, 13900000000001, 'SY에게 출금', 'SEO로부터 입금', 10000, 01, '001-1923-0000', 1111);

EXEC PR_TRANSACTION(02, 13900000000001, 'SM에게 출금', 'SEO로부터 입금', 10000, 04, '010-2609-3796', 1111);


SELECT * FROM K_ACCOUNT@ORCL_TO_SYORCL_LINK;
DESC O_TRANSACTION_HISTORY@ORCL_TO_HJORCL_LINK;

SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTION_DETAIL;
DESC TRANSACTION_DETAIL;

SELECT * FROM USER_TABLES@ORCL_TO_SYORCL_LINK;
SELECT * FROM USER_SEQUENCES@ORCL_TO_SYORCL_LINK;
DESC K_TRANSACTION@ORCL_TO_SYORCL_LINK;
SELECT * FROM K_TRANSACTION@ORCL_TO_SYORCL_LINK;

SELECT * FROM USER_TABLES@ORCL_TO_SMORCL_LINK;
SELECT * FROM USER_SEQUENCES@ORCL_TO_SMORCL_LINK;
DESC SM_HISTORY@ORCL_TO_SMORCL_LINK;
SELECT * FROM SM_HISTORY@ORCL_TO_SMORCL_LINK;

SELECT * FROM EXCEPTION_LOG;

commit;
ROLLBACK;

DELETE FROM TRANSACTION_DETAIL;
SELECT * FROM TRANSACTION_DETAIL;
SELECT * FROM USER_TABLES;
DELETE FROM EXCEPTION_LOG;
COMMIT;

